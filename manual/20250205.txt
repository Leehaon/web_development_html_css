  포지셔닝 :
    HTML로 만든 웹 페이지는 하나의 기기로만 여는 것이 아니라서 위치값이 상대적입니다. 즉 상대적인 요소를 잡는 데 포지셔닝이 중요한 역할을 함.

    1. position 속성 : 

      https://showcases.yalco.kr/html-css/02-09/01.html 참조

        사이트 내부를 확인했을 때
        커다란 div(class= container) 내에 8개의 회색 div과 오렌지색 div(class= orange)가 있고, 오렌지 div 내부에 더 작은 div(class= red)가 있습니다.

        orange / red를 움직이면서 position 개념 학습.

        position 속성의 경우 HTML 요소들이 해당 페이지에서 어떻게 배치될지를 지정함.
          -> 중요한 점은 : 부모 요소의 것이 자식 속성에게 상속되지 '않음'
          cf-font-size의 경우 자식에게 상대값 형태(em)으로 상속이 됐던 것과 차이가 있습니다.

          1) static : top 30px left 30px 입력하더라도 페이지 상 변화 x
            즉 static의 경우에는 원래 존재하는 페이지의 요소대로 따르기 때문에 위치 속성 지정을 하더라도 소용 x -> static(정적)인 상태

          2) relative : 원래 있던 위치를 기준으로 top / left / right 등의 속성값이 적용됨. -> 요소 위치는 이동하는데 공백 위치는 그대로 유지됨. : 회색 상자들은 안움직였습니다.

          3) absolute : position 속성에서 'static이 아닌 첫 부모 요소를 기준으로 top, bottom, left, right, z-index 속성값을 이용하여 위치 조절 가능'  
            첫 부모 -> 가장 바깥 쪽 태그 x
                   -> position: absolute; 표기한 태그의 바로 윗 단계

            position속성의 default 값은 : static 

            특징 : 
              자리를 차지하지 않는다.
              참조 사이트 기준으로 다른거 다 지운 상태로
              position: absolute; 를 적용했을 경우에
              회색 사각형이 하나 사라진 것으로 보이는 이유는 :
                실제로 사라진 것이 아니라 오렌지 div 태그에 
                겹쳐진 상태로 회색 사각형이 하나 있는 상태로 봐야 합니다.

                -> 한칸씩 밀려 들어와 있다 -> 그 결과 눈에 보이는 것은 사각형이 8개만 존재.

          4) fixed : 항상 부모 요소가 아니라 뷰포트(viewport)를 기준으로 합니다.
            특징 : 스크롤에 영향을 받지 않는다 -> navigation bar와 같은 경우에는 스크롤을 내리더라도 존재해야 하기 때문에 응용이 가능할 수도 있습니다. -> 웹사이트에서 특정 팝업 창을 띄운 후에 스크롤과 상관없이 한 곳에 고정시킬때 '유용함'

          5) sticky : 
            어떤 요소가 스크롤로 이동할 수 있는 공간을 top, bottom, left, right, z-index 속성값을 이용하여 지정.
            특징 :
              부모 요소의 여백 등에도 영향을 받음.
              자식 요소의 위치를 고정(red div)해도 부모 요소의 위치(orange div)를 벗어나면 자식 요소는 더 이상 움직이 수 없기 때문에 sticky는 부모 요소의 안쪽이 아닌 동등하거나 바깥쪽 요소에 지정하는 편이 나옴.

          6) z-index 속성 :
            x축 / y축 / z축 에서 z축 관련 부분
            default 값은 => auto로 되어있는데 = 0을 의미함.

            https://showcases.yalco.kr/html-css/02-09/02.html  

            n03zindex 파일 생성 -> 관련 수업 했고

            Flex 수업 할 예정

            https://showcases.yalco.kr/html-css/02-11/01.html 

Flex layout :
  모든 웹 사이트는 커다란 레이아웃 형태로 되어있고, 이를 만드는 방식이 다야합니다.
  예전에는 HTML과 블록 요소만 이용해서 레이아웃을 작성했으나, Flex 등장 이후에 CSS 기능을 적용하여 작성할 수 있게 됐습니다.

  부모에 적용하게 되는 flex / 자식에 적용하게 되는 flex
  참조 사이트 기준으로 회색 div은 부모 요소 / 보라색 div 자식 요소로 3개가 있습니다.

  div태그이기 때문에 block요소 적용되어있습니다. -> 이까지가 default
  min-width : 48px;
  min-height : 48px;로 설정되있습니다 -> 자식요소가

  1. display: flex; -> 세로 배치
  2. display: inline-flex; -> 부모 div '인라인 블록(블록 개념에서 확인하셔야 합니다. 0203-0204에 수업)' 상태됨.
  해당 부모 요소를 블록으로 두는게 flex, inline으로 만드는게 inline-fixe

  1) flex-direction 속성 : 
    flex-direction: row;                  -> 내부 요소를 왼쪽부터 차례로 정렬(메인 축이 x축이기 때문에 가로 배치)
    flex-direction: row-reverse;
    flex-direction: column;               -> 내부 요소를 위에서부터 정렬(메인 축이 y축)
    flex-direction: column-reverse;

    reverse를 적용했을 시에 -> HTML 상으로는 div의 순서가 바뀌지 않지만
    웹 페이지 상에서의 눈으로 보는 순서가 뒤바뀜.

    flext-direction 속성에서 축의 방향을 어떻게 지정하느냐에 따라 달린 속성 :
      (1) justify-content :
        메인 축에서 내부 요소를 정렬하는 방식
          flex-start : 시작지점부터 정렬
      (2) align-itmes
      (3) align-content
